Metadata-Version: 2.1
Name: crypto-empyrical
Version: 1.0.4
Summary: crypto_empyrical is a fork of Quantopian's Empyrical package modified to work for 24/7 markets of cryptocurrency
Home-page: https://github.com/jesse-ai/crypto-empyrical
Maintainer: Jesse.Trade
Maintainer-email: info@jesse.trade
License: Apache License, Version 2.0
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: pandas
Requires-Dist: scipy
Requires-Dist: six
Requires-Dist: pandas-datareader
Provides-Extra: dev
Requires-Dist: nose (==1.3.7) ; extra == 'dev'
Requires-Dist: parameterized (==0.6.1) ; extra == 'dev'
Requires-Dist: flake8 (==2.5.1) ; extra == 'dev'

[![PyPI](https://img.shields.io/pypi/v/crypto_empyrical?color=%234ec726&style=flat-square)](https://pypi.org/project/crypto_empyrical/)

# crypto_empyrical

crypto_empyrical is a fork of Quantopian's Empyrical package modified by [Jesse](https://jesse.trade) to work for 24/7 markets of cryptocurrency. 

## Table of Contents

- [Installation](#installation)
- [Usage](#usage)
- [Support](#support)
- [Contributing](#contributing)
- [Testing](#testing)

## Installation
```
pip install crypto_empyrical
```

## Usage

Simple Statistics
```python
import numpy as np
from crypto_empyrical import max_drawdown, alpha_beta

returns = np.array([.01, .02, .03, -.4, -.06, -.02])
benchmark_returns = np.array([.02, .02, .03, -.35, -.05, -.01])

# calculate the max drawdown
max_drawdown(returns)

# calculate alpha and beta
alpha, beta = alpha_beta(returns, benchmark_returns)

```

Rolling Measures
```python
import numpy as np
from crypto_empyrical import roll_max_drawdown

returns = np.array([.01, .02, .03, -.4, -.06, -.02])

# calculate the rolling max drawdown
roll_max_drawdown(returns, window=3)

```

Pandas Support
```python
import pandas as pd
from crypto_empyrical import roll_up_capture, capture

returns = pd.Series([.01, .02, .03, -.4, -.06, -.02])

# calculate a capture ratio
capture(returns)

# calculate capture for up markets on a rolling 60 day basis
roll_up_capture(returns, window=60)
```

## Testing
- install requirements
  - "nose>=1.3.7",
  - "parameterized>=0.6.1"

```
./runtests.py
```


